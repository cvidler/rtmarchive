# queryrcon Script
# Chris Vidler - Dynatrace DCRUM SME 2015
#
# Builds amdlist.cfg from querying RUM console.
# parameters
# 0|1	update amdlist.cfg file in path below default 0 OFF
# 0|1	debug output debug info. default 0 OFF
#

#config 
RUMCCONF=/etc/rumc.cfg
AMDLIST=/tmp/amdlist.cfg


#temp vars to be replaced with read from RUMCCONF file
RUMPROT=https
RUMADDR=192.168.93.128
RUMPORT=4183
RUMUSER=rumcaccess
RUMHASH=1ec72b5061df466c929f2cc4eb1d07a0

# Start of script - do not edit below
set -euo pipefail
IFS=$',\n\t'
AWK=`which awk`
WGET=`which wget`

#command line parameters
UPDATELIST=${1:-0}
DEBUG=${2:-0}


function debugecho {
        if [ $DEBUG -ne 0 ]; then echo -e "\e[2m***DEBUG\n$@\e[0m\n"; fi
	}

function derumpassword {
	echo `printf %s "$@" | xxd -r -p | openssl enc -aes-128-ecb -d -K 6f018ccd57a6f1d5757a13674a75c1c2`
}

urlencode() {
	# urlencode <string>
	
	local length="${#1}"
	for (( i = 0; i < length; i++ )); do
		local c="${1:i:1}"
		case $c in
			[a-zA-Z0-9.~_-]) printf "$c" ;;
		*) printf '%s' "$c" | xxd -p -c1 |
			while read c; do printf '%%%s' "$c"; done ;;
		esac
	done
}


RUMPASS=$(derumpassword $RUMHASH)

echo "rtmarchive System: RUM Console AMD Query script"
echo "Chris Vidler - Dynatrace DCRUM SME, 2016"
echo ""

#query RUMC
echo "Connecting to RUM Console on: $RUMPROT://$RUMADDR:$RUMPORT/"
#query RUMC server for XML data of all devices
#XML=`wget --no-check-certificate -q --header="Accept: application/xml" -O - --user '$RUMUSER' --password '$RUMPASS' $RUMPROT://$RUMADDR:$RUMPORT/cxf/rest/backup`

set +e
XML=`wget --no-check-certificate -q --header="Accept: application/xml" -O - --user "$RUMUSER" --password "$RUMPASS" $RUMPROT://$RUMADDR:$RUMPORT/cxf/rest/backup`
if [ $? -ne 0 ]; then echo -e "\e[31m***FATAL:\e[0m RUM Console on $RUMPROT://$RUMADDR:$RUMPORT/ not responding/bad logon/etc." ; exit; fi
set -e
debugecho "$XML"


#Extract required info from XML
#gawk ' BEGIN { FS="|"; RS="</devices>"; OFS=","; } match($0,"<name>([a-zA-Z0-9]*?)</name><type>0<.+?\"IS_HTTPS\" value=\"([a-z]+?)\"/>.*?\"PORT\" value=\"([0-9]+?)\"/>.+?\"PASSWORD\" value=\"(.*?)\"/>.*?\"IP\" value=\"([^\"]*?)\"/>.*?\"VERSION\" value=\"([^\"]*?)\"/>.*?\"USER\" value=\"([^\"]*?)\"/>",a)  { print a[1],a[2],a[3],a[4],a[5],a[6],a[7] }'
# returns for each AMD in the RUMC
# 1: name
# 2: http/https flag
# 3: port number for comms
# 4: encrypted password
# 5: address for comms
# 6: version number (eAMDs return 0.0.0)
# 7: username for access

#12.3 and 12.4 AMDs
PARSED=`echo -e $XML | $AWK ' BEGIN { FS="|"; RS="</devices>"; OFS=","; } match($0,"<name>([a-zA-Z0-9]*?)</name><type>0<.+?\"IS_HTTPS\" value=\"([a-z]+?)\"/>.*?\"PORT\" value=\"([0-9]+?)\"/>.+?\"PASSWORD\" value=\"([a-fA-F0-9]+?)\"/>.*?\"IP\" value=\"([^\"]*?)\"/>.*?\"VERSION\" value=\"([^\"]*?)\"/>.*?\"USER\" value=\"([^\"]*?)\"/>",a)  { print a[1],a[2],a[3],a[4],a[5],a[6],a[7] }'`
#12.4 NG AMDs are different.
PARSEDNG=`echo -e $XML | $AWK ' BEGIN { FS="|"; RS="</devices>"; OFS=","; } match($0,"<name>([a-zA-Z0-9]*?)</name><type>0<.+?\"IS_HTTPS\" value=\"([a-z]+?)\"/>.*?\"PASSWORD\" value=\"([a-fA-F0-9]+?)\"/>.+?\"PORT\" value=\"([0-9]+?)\"/>.*?\"IP\" value=\"([^\"]*?)\"/>.*?\"VERSION\" value=\"([^\"]*?)\"/>.*?\"USER\" value=\"([^\"]*?)\"/>",a)  { print a[1],a[2],a[4],a[3],a[5],a[6],a[7] }'`

echo "Parsing response from RUM Console...."

IFS=$''
PARSED=`echo -e "$PARSED\n$PARSEDNG"`
debugecho $PARSED

if [ $UPDATELIST -ne 1 ]; then AMDLIST=/dev/null; fi


echo "Creating $AMDLIST output"
IFS=$', '
echo -n "" | tee $AMDLIST
echo "# rtmarchive AMD List" | tee -a $AMDLIST
echo "# Generated by $0 on "`date` | tee -a $AMDLIST

echo $PARSED | while read a b c d e f g; do
	
	#echo -e "$a-$b-$c-$d-$e-$f-$g"
	if [ $b == false ]; then 
		b=http
	else 
		b=https 
	fi
	d=$(derumpassword $d)
	d=$(urlencode $d)
	g=$(urlencode $g)
	url=$b://$g:$d@$e:$c/
	#check connection to AMD
	set +e
	RETURN=`wget --no-check-certificate -q --header="Accept: application/xml" -O - $url/RtmDataServlet?cmd=version`
	if [ $? -ne 0 ]; then RETURN=; fi
	set -e
	debugecho $RETURN
	if [[ $RETURN == *"Emulated"* ]]; then
		#Archive AMD, disable it.
		echo -en "\e[2m"
		echo "# AMD '$a' ($e:$c) is an archive AMD. Disabling it." | tee -a $AMDLIST
		echo "D,$url,$a" | tee -a $AMDLIST
		echo -en "\e[0m"
	elif [[ $RETURN == "" ]]; then
		#AMD returned no version data? not working? disable it
		echo -e "\e[33m***WARNING: No response from AMD '$a' ($e:$c)\e[0m\e[2m"
		echo "# AMD '$a' ($e:$c) returned no version info or not responding, disabling it." | tee -a $AMDLIST
		echo "D,$url,$a" | tee -a $AMDLIST
		echo -en "\e[0m"
	else
		echo -en "\e[32m"
		echo "# AMD '$a' ($e:$c) version: $f active." | tee -a $AMDLIST
		echo "A,$url,$a" | tee -a $AMDLIST
		echo -en "\e[0m"
	fi

done;

echo -e "\e[0mCompleted."

